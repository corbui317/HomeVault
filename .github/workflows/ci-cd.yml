name: HomeVault CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18"
  MONGODB_VERSION: "6.0"

jobs:
  # Lint and Test Job
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm install
          cd backend && npm install
          cd ../frontend && npm install

      - name: Run backend linting
        run: |
          cd backend
          npm run lint || echo "No lint script found, skipping..."

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint || echo "No lint script found, skipping..."

      - name: Run backend tests
        run: |
          cd backend
          npm test || echo "No test script found, skipping..."
        env:
          MONGO_URI: mongodb://localhost:27017/homevault_test
          NODE_ENV: test

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false --coverage || echo "No test script found, skipping..."

  # Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm install
          cd backend && npm install
          cd ../frontend && npm install

      - name: Build frontend
        run: |
          cd frontend
          NODE_OPTIONS="--max-old-space-size=4096" npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 7

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            backend/
            !backend/node_modules/
            !backend/.env
          retention-days: 7

  # Security Scan Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install
          cd backend && npm install
          cd ../frontend && npm install

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || true
          cd backend && npm audit --audit-level=moderate || true
          cd ../frontend && npm audit --audit-level=moderate || true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # Deploy to Staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: rsync, docker push, or cloud deployment

  # Deploy to Production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Test SSH Connection
        run: |
          # Test SSH connection
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo 'SSH connection successful'"

          # Show SSH configuration
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "whoami && pwd"

      - name: Configure Server Permissions
        run: |
          # Configure sudoers for the deploy user
          ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
            echo 'Configuring server permissions...'
            
            # Add deploy user to systemd-journal group for log access
            sudo usermod -a -G systemd-journal deploy
            
            # Configure sudoers for systemctl and journalctl commands
            echo 'deploy ALL=(ALL) NOPASSWD: /bin/systemctl, /bin/journalctl, /bin/ss, /bin/cat, /bin/tail, /bin/nginx, /bin/certbot, /bin/ufw' | sudo tee /etc/sudoers.d/deploy-permissions
            
            # Set proper permissions
            sudo chmod 440 /etc/sudoers.d/deploy-permissions
            
            # Test the configuration
            echo 'Testing sudo configuration...'
            sudo -n systemctl status homevault --no-pager || echo 'Sudo test failed'
            
            echo 'Server permissions configured successfully!'
          "

      - name: Deploy to EC2
        run: |
          # Create directory structure in user's home directory first
          ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            echo "Setting up deployment directories..."
            
            # Create directories in user's home directory
            mkdir -p ~/homevault_temp
            mkdir -p ~/homevault_temp/uploads
            
            echo "Directories created successfully!"
          EOF

          # Copy files to temporary location in user's home
          echo "Copying files to server..."
          rsync -avz --delete --timeout=300 \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude '.github' \
            --exclude '*.log' \
            ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/homevault_temp/

          # Move to final location and set up application
          ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            echo "Moving files to final location..."
            
            # Create final directory if it doesn't exist
            mkdir -p /opt/homevault
            
            # Move files from temp location
            rm -rf /opt/homevault/*
            mv ~/homevault_temp/* /opt/homevault/
            
            # Clean up temp directory
            rm -rf ~/homevault_temp
            
            echo "Files moved successfully!"
          EOF

      - name: Write Firebase service account JSON to server
        run: |
          ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON_BASE64 }}' | base64 -d > /opt/homevault/backend/firebase-service-account.json && chmod 600 /opt/homevault/backend/firebase-service-account.json"

      - name: Setup SSL Certificate
        run: |
          ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
            echo 'Setting up SSL certificate...'
            
            # Install certbot if not installed
            if ! command -v certbot &> /dev/null; then
              echo 'Installing certbot...'
              sudo apt update
              sudo apt install -y certbot python3-certbot-nginx
            fi
            
            # Check if certificate already exists
            if sudo certbot certificates | grep -q '${{ secrets.DOMAIN_NAME }}'; then
              echo 'SSL certificate already exists, renewing...'
              sudo certbot renew --quiet
            else
              echo 'Getting new SSL certificate...'
              sudo certbot --nginx -d ${{ secrets.DOMAIN_NAME }} --non-interactive --agree-tos --email admin@${{ secrets.DOMAIN_NAME }}
            fi
            
            echo 'SSL certificate setup completed!'
          "

      - name: Setup Complete Server Configuration
        run: |
          # Create nginx config script
          cat > nginx_setup.sh << 'SCRIPT_EOF'
          #!/bin/bash
          echo 'Setting up complete server configuration...'

          # Check if we have sudo access
          if sudo -n true 2>/dev/null; then
            echo 'Sudo access confirmed, proceeding with configuration...'
            
            # Install certbot
            sudo apt update
            sudo apt install -y certbot python3-certbot-nginx
            
            # Create nginx config file
            sudo tee /etc/nginx/sites-available/${{ secrets.DOMAIN_NAME }} > /dev/null << 'NGINX_EOF'
            server {
                listen 80;
                server_name ${{ secrets.DOMAIN_NAME }};
                
                location / {
                    proxy_pass http://localhost:5000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_cache_bypass \$http_upgrade;
                }
            }
            NGINX_EOF
            
            # Enable the site and disable default
            sudo ln -sf /etc/nginx/sites-available/${{ secrets.DOMAIN_NAME }} /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            
            # Test and reload nginx
            sudo nginx -t
            sudo systemctl reload nginx
            
            # Get SSL certificate
            sudo certbot --nginx -d ${{ secrets.DOMAIN_NAME }} --non-interactive --agree-tos --email admin@${{ secrets.DOMAIN_NAME }}
            
            echo 'Complete server configuration finished!'
          else
            echo 'No sudo access available. Manual configuration required.'
            echo 'Please run these commands on the server as root:'
            echo '1. usermod -a -G sudo deploy'
            echo '2. echo \"deploy ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers'
            echo '3. Then re-run this deployment.'
            exit 1
          fi
          SCRIPT_EOF

          # Copy script to server and run it
          scp nginx_setup.sh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "chmod +x /tmp/nginx_setup.sh && /tmp/nginx_setup.sh && rm /tmp/nginx_setup.sh"

      - name: Set environment variables and deploy
        run: |
          ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd /opt/homevault
            
            # Set environment variables
            export NODE_ENV=production
            export MONGO_URI=mongodb://homevault:${{ secrets.MONGODB_PASSWORD }}@localhost:27017/homevault
            export CLIENT_ORIGIN=https://${{ secrets.DOMAIN_NAME }}
            export PORT=5000
            
            # Clean up any existing node_modules
            echo "Cleaning up existing node_modules..."
            rm -rf node_modules backend/node_modules
            
            # Create uploads directory if it doesn't exist
            mkdir -p uploads
            chmod 755 uploads
            
            # Set up environment file
            echo "MONGODB_URI=mongodb://homevault:${{ secrets.MONGODB_PASSWORD }}@localhost:27017/homevault" > backend/.env
            echo "FIREBASE_SERVICE_ACCOUNT_KEY_PATH=/opt/homevault/backend/firebase-service-account.json" >> backend/.env
            echo "CLIENT_ORIGIN=https://${{ secrets.DOMAIN_NAME }}" >> backend/.env
            echo "PORT=5000" >> backend/.env
            
            # Install root dependencies
            echo "Installing root dependencies..."
            npm install --omit=dev --no-audit --no-fund
            
            # Install backend dependencies
            echo "Installing backend dependencies..."
            cd backend && npm install --omit=dev --no-audit --no-fund && cd ..
            
            # Verify installations
            echo "Verifying installations..."
            echo "Root Express version:"
            npm list express
            echo "Backend Express version:"
            cd backend && npm list express && cd ..
            
            echo "Restarting application..."
            sudo systemctl restart homevault
            
            # Check if application is running
            echo "Waiting for application to start..."
            sleep 15
            
            # Try multiple health checks
            for i in {1..5}; do
              echo "Health check attempt $i..."
              if curl -f http://localhost:5000/health > /dev/null 2>&1; then
                echo "✅ Application is running successfully!"
                break
              else
                echo "❌ Health check failed, attempt $i"
                if [ $i -eq 5 ]; then
                  echo "Application failed to start after 5 attempts"
                  echo "=== Service Status ==="
                  sudo systemctl status homevault --no-pager
                  echo "=== Recent Logs ==="
                  sudo journalctl -u homevault -n 30 --no-pager
                  echo "=== Application Directory ==="
                  ls -la /opt/homevault/
                  echo "=== Backend Directory ==="
                  ls -la /opt/homevault/backend/
                  echo "=== MongoDB Status ==="
                  sudo systemctl status mongod --no-pager
                  exit 1
                fi
                sleep 5
              fi
            done
            
            echo "Deployment completed successfully!"
          EOF

      - name: Verify HTTPS
        run: |
          # Wait for DNS propagation and services to stabilize
          sleep 30

          # Test HTTPS
          if curl -f https://${{ secrets.DOMAIN_NAME }}/health > /dev/null 2>&1; then
            echo "✅ HTTPS is working correctly!"
          else
            echo "❌ HTTPS verification failed"
            echo "Running comprehensive diagnostics..."
            
            # Run diagnostics directly via SSH
            ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
              echo '=== Application Status ==='
              sudo systemctl status homevault --no-pager
              
              echo '=== Nginx Status ==='
              sudo systemctl status nginx --no-pager
              
              echo '=== Nginx Configuration Test ==='
              sudo nginx -t
              
              echo '=== Nginx Configuration ==='
              sudo cat /etc/nginx/sites-available/default
              
              echo '=== Port Listening Status ==='
              sudo ss -tlnp | grep -E ':(80|443|5000)'
              
              echo '=== SSL Certificate Status ==='
              sudo certbot certificates 2>/dev/null || echo 'Certbot not installed or no certificates found'
              
              echo '=== Firewall Status ==='
              sudo ufw status
              
              echo '=== Local Health Check ==='
              curl -f http://localhost:5000/health || echo 'Local health check failed'
              
              echo '=== Nginx Error Logs ==='
              sudo tail -n 20 /var/log/nginx/error.log
              
              echo '=== Application Logs ==='
              sudo journalctl -u homevault -n 20 --no-pager
            "
            
            exit 1
          fi

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint-and-test, build, security-scan]
    if: failure()

    steps:
      - name: Notify failure
        run: |
          echo "CI/CD pipeline failed!"
          # Add your notification logic here (Slack, email, etc.)
