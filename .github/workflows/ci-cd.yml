name: HomeVault CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'

jobs:
  # Lint and Test Job
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install
        cd backend && npm install
        cd ../frontend && npm install

    - name: Run backend linting
      run: |
        cd backend
        npm run lint || echo "No lint script found, skipping..."

    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint || echo "No lint script found, skipping..."

    - name: Run backend tests
      run: |
        cd backend
        npm test || echo "No test script found, skipping..."
      env:
        MONGO_URI: mongodb://localhost:27017/homevault_test
        NODE_ENV: test

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --watchAll=false --coverage || echo "No test script found, skipping..."

  # Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install
        cd backend && npm install
        cd ../frontend && npm install

    - name: Build frontend
      run: |
        cd frontend
        NODE_OPTIONS="--max-old-space-size=4096" npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 7

    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: |
          backend/
          !backend/node_modules/
          !backend/.env
        retention-days: 7

  # Security Scan Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        npm install
        cd backend && npm install
        cd ../frontend && npm install

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate || true
        cd backend && npm audit --audit-level=moderate || true
        cd ../frontend && npm audit --audit-level=moderate || true

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  # Deploy to Staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/

    - name: Deploy to staging server
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: rsync, docker push, or cloud deployment

  # Deploy to Production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

    - name: Test SSH Connection
      run: |
        # Test SSH connection
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo 'SSH connection successful'"
        
        # Show SSH configuration
        ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "whoami && pwd"

    - name: Deploy to EC2
      run: |
        # Create directory structure in user's home directory first
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          echo "Setting up deployment directories..."
          
          # Create directories in user's home directory
          mkdir -p ~/homevault_temp
          mkdir -p ~/homevault_temp/uploads
          
          echo "Directories created successfully!"
        EOF
        
        # Copy files to temporary location in user's home
        echo "Copying files to server..."
        rsync -avz --delete --timeout=300 \
          --exclude 'node_modules' \
          --exclude '.git' \
          --exclude '.github' \
          --exclude '*.log' \
          ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/homevault_temp/
        
        # Move to final location and set up application
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          echo "Moving files to final location..."
          
          # Create final directory if it doesn't exist
          sudo mkdir -p /opt/homevault
          sudo chown deploy:deploy /opt/homevault
          
          # Move files from temp location
          sudo rm -rf /opt/homevault/*
          sudo mv ~/homevault_temp/* /opt/homevault/
          sudo chown -R deploy:deploy /opt/homevault
          
          # Clean up temp directory
          rm -rf ~/homevault_temp
          
          echo "Files moved successfully!"
        EOF
        
        # Set environment variables and deploy
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          cd /opt/homevault
          export NODE_ENV=production
          export MONGO_URI=mongodb://homevault:YOUR_ACTUAL_MONGODB_PASSWORD@localhost:27017/homevault
          export CLIENT_ORIGIN=https://${{ secrets.DOMAIN_NAME }}
          export PORT=5000
          
          echo "Installing root dependencies..."
          npm install --omit=dev --no-audit --no-fund
          
          echo "Installing backend dependencies..."
          cd backend && npm install --omit=dev --no-audit --no-fund && cd ..
          
          echo "Skipping frontend npm install (using pre-built files)..."
          
          # Force correct Express version by cleaning and reinstalling
          echo "Ensuring correct Express version..."
          rm -rf node_modules backend/node_modules
          npm install --omit=dev --no-audit --no-fund
          cd backend && npm install --omit=dev --no-audit --no-fund && cd ..
          
          # Verify Express version
          echo "Express version check:"
          npm list express
          cd backend && npm list express && cd ..
          
          # Create uploads directory if it doesn't exist
          mkdir -p uploads
          chmod 755 uploads
          
          # Create backend .env file
          echo "Creating backend .env file..."
          echo "MONGODB_URI=mongodb://homevault:YOUR_ACTUAL_MONGODB_PASSWORD@localhost:27017/homevault" > backend/.env
          echo "FIREBASE_SERVICE_ACCOUNT_KEY=${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" >> backend/.env
          echo "CLIENT_ORIGIN=https://${{ secrets.DOMAIN_NAME }}" >> backend/.env
          echo "PORT=5000" >> backend/.env
          
          # Create frontend .env file
          echo "Creating frontend .env file..."
          echo "REACT_APP_API_URL=https://${{ secrets.DOMAIN_NAME }}/api" > frontend/.env
          echo "REACT_APP_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> frontend/.env
          echo "REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> frontend/.env
          echo "REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> frontend/.env
          echo "REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> frontend/.env
          echo "REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> frontend/.env
          echo "REACT_APP_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> frontend/.env
          
          echo "Restarting application..."
          sudo systemctl restart homevault
          
          # Check if application is running
          echo "Waiting for application to start..."
          sleep 15
          
          # Try multiple health checks
          for i in {1..5}; do
            echo "Health check attempt $i..."
            if curl -f http://localhost:5000/health > /dev/null 2>&1; then
              echo "✅ Application is running successfully!"
              break
            else
              echo "❌ Health check failed, attempt $i"
              if [ $i -eq 5 ]; then
                echo "Application failed to start after 5 attempts"
                echo "=== Service Status ==="
                sudo systemctl status homevault --no-pager
                echo "=== Recent Logs ==="
                sudo journalctl -u homevault -n 30 --no-pager
                echo "=== Application Directory ==="
                ls -la /opt/homevault/
                echo "=== Backend Directory ==="
                ls -la /opt/homevault/backend/
                echo "=== MongoDB Status ==="
                sudo systemctl status mongod --no-pager
                exit 1
              fi
              sleep 5
            fi
          done
          
          echo "Deployment completed successfully!"
        EOF

    - name: Setup SSL Certificate (if needed)
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          # Check if SSL certificate exists
          if [ ! -f /etc/letsencrypt/live/${{ secrets.DOMAIN_NAME }}/fullchain.pem ]; then
            echo "Setting up SSL certificate..."
            
            # Stop nginx temporarily
            sudo systemctl stop nginx
            
            # Get SSL certificate
            sudo certbot certonly --standalone \
              --email your-email@example.com \
              --agree-tos \
              --no-eff-email \
              -d ${{ secrets.DOMAIN_NAME }} \
              -d www.${{ secrets.DOMAIN_NAME }}
            
            # Start nginx
            sudo systemctl start nginx
          else
            echo "SSL certificate already exists"
          fi
          
          # Test nginx configuration
          sudo nginx -t
          
          # Reload nginx
          sudo systemctl reload nginx
          
          echo "SSL certificate setup completed!"
        EOF

    - name: Verify HTTPS
      run: |
        # Wait for DNS propagation and services to stabilize
        sleep 30
        
        # Test HTTPS
        if curl -f https://${{ secrets.DOMAIN_NAME }}/health > /dev/null 2>&1; then
          echo "✅ HTTPS is working correctly!"
        else
          echo "❌ HTTPS verification failed"
          echo "Checking application status..."
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "sudo systemctl status homevault nginx --no-pager"
          exit 1
        fi

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint-and-test, build, security-scan]
    if: failure()
    
    steps:
    - name: Notify failure
      run: |
        echo "CI/CD pipeline failed!"
        # Add your notification logic here (Slack, email, etc.) 
        